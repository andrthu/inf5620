import numpy as np

def step1(u,u_1,x,y,t,F,V,C1,C2,dt,b,q):
    
    u_xx=0.5*(q(x[1:-1],y[1:-1])+q(x[2:],y[1:-1]))*(u_1[2:,1:-1]-u_1[1:-1,1:-1])-0.5*(q(x[1:-1],y[1:-1])+q(x[:-2],y[1:-1]))*(u_1[1:-1,1:-1]-u_1[:-2,1:-1])

    u_yy=0.5*(q(x[1:-1],y[1:-1])+q(x[1:-1],y[2:]))*(u_1[1:-1,2:]-u_1[1:-1,1:-1])-0.5*(q(x[1:-1],y[1:-1])+q(x[1:-1],y[:-2]))*(u_1[1:-1,1:-1]-u_1[1:-1,:-2])

    u[1:-1,1:-1] = ((1+0.5*b*dt)*u_1[1:-1,1:-1] +dt*V(x[1:-1],y[1:-1]) + 0.5*dt**2*f(x[1:-1],y[1:-1],0) +0.5*C1*u_xx + 0.5*C2*u_yy)/( 1 + 0.5*b*dt )

    

    return u


def step1_neuman_y(u_1,x,y,t,f,V,C1,C2,dt,i,N,b,q):

    A1 = (1+0.5*b*dt)*u_1[i,0]+dt*V(x[i],y[0])+ 0.5*dt**2*f(x[i],y[0],t[0])
    A2 = (1+0.5*b*dt)*u_1[i,N-1]+dt*V(x[i],y[N-1])+0.5*dt**2*f(x[i],y[N-1],t[0])
    
    q11 = 0.5*(q(x[i],y[0]) + q(x[i+1],y[0]))  
    q12 = 0.5*(q(x[i],y[0]) + q(x[i-1],y[0]))

    q21 = 0.5*(q(x[i],y[N-1]) + q(x[i+1],y[N-1]))  
    q22 = 0.5*(q(x[i],y[N-1]) + q(x[i-1],y[N-1]))
    
    B1 = 0.5*C1*(q11*(u_1[i+1,0] - u_1[i,0]) - q12*(u_1[i,0] - u_1[i-1,0]))
    B2 = 0.5*C1*(q21*(u_1[i+1,N-1]-u_1[i,N-1])-q22*(u_1[i,N-1]-u_1[i-1,N-1]))

    D1 = C2*q(x[i],y[0])*(u_1[i,1] - u_1[i,0]) 
    D2 = C2*q(x[i],y[N-1])*(u_1[i,N-2] - u_1[i,N-1]) 

    return (A1+B1+D1)/( 1 + 0.5*b*dt ), (A2+B2+D2)/( 1 + 0.5*b*dt )

def step1_neuman_x(u_1,x,y,t,f,V,C1,C2,dt,j,N,b,q):

    A1 = (1+0.5*b*dt)*u_1[0,j]+dt*V(x[0],y[j])+0.5*dt**2*f(x[0],y[j],t[0])
    A2 = (1+0.5*b*dt)*u_1[N-1,j]+dt*V(x[N-1],y[j])+0.5*dt**2*f(x[N-1],y[j],t[0])
    
    B1 = C1*q(x[0],y[j])*(u_1[1,j] - u_1[0,j]) 
    B2 = C1*q(x[N-1],y[j])*(u_1[N-2,j] - u_1[N-1,j]) 

    q11 = 0.5*(q(x[0],y[j]) + q(x[0],y[j+1]))  
    q12 = 0.5*(q(x[0],y[j]) + q(x[0],y[j-1]))

    q21 = 0.5*(q(x[N-1],y[j]) + q(x[N-1],y[j+1]))  
    q22 = 0.5*(q(x[N-1],y[j]) + q(x[N-1],y[j-1]))

    D1 = 0.5*C2*(q11*(u_1[0,j+1] - u_1[0,j]) - q12*(u_1[0,j] - u_1[0,j-1]))
    D2 = 0.5*C2*(q21*(u_1[N-1,j+1] - u_1[N-1,j])-q22*(u_1[N-1,j]-u_1[N-1,j-1]))

    return (A1+B1+D1)/( 1 + 0.5*b*dt ), (A2+B2+D2)/( 1 + 0.5*b*dt )

    A = (1+0.5*b*dt)*u_1[i,j] + dt*V(x[i],y[j]) + 0.5*dt**2*f(x[i],y[j],t[0])
    
    qx1 = 0.5*(q(x[i],y[j]) + q(x[i+1],y[j]))  
    qx2 = 0.5*(q(x[i],y[j]) + q(x[i-1],y[j]))

    B = 0.5*C1*(qx1*(u_1[i+1,j] - u_1[i,j]) - qx2*(u_1[i,j] - u_1[i-1,j])) 

    qy1 = 0.5*(q(x[i],y[j]) + q(x[i],y[j+1]))  
    qy2 = 0.5*(q(x[i],y[j]) + q(x[i],y[j-1]))
    
    D = 0.5*C2*(qy1*(u_1[i,j+1] - u_1[i,j]) - qy2*(u_1[i,j] - u_1[i,j-1]))

    return (A + B + D)/( 1 + 0.5*b*dt ) 
